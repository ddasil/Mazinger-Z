import os
import json
import requests
from dotenv import load_dotenv
from openai import OpenAI
from bs4 import BeautifulSoup
import lyricsgenius

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
GENIUS_TOKEN = os.getenv("GENIUS_ACCESS_TOKEN")
genius = lyricsgenius.Genius(GENIUS_TOKEN, skip_non_songs=True, excluded_terms=["(Remix)", "(Live)"])

# GPTÎ°ú Í∞ÄÏÇ¨ ÏÉùÏÑ± (Î∞±ÏóÖÏö©)
def generate_lyrics_by_title(song_title: str) -> str:
    prompt = f"""
    "{song_title}"ÎùºÎäî ÎÖ∏ÎûòÏùò Ï†ÑÏ≤¥ Í∞ÄÏÇ¨Î•º ÏµúÎåÄÌïú Ï†ïÌôïÌïòÍ≥† Í∏∏Í≤å ÏûëÏÑ±Ìï¥Ï§ò.
    Í∞ÄÏÇ¨Îäî Î∞òÎìúÏãú Ï§ÑÎ∞îÍøà(\n)ÏùÑ Ìè¨Ìï®Ìï¥Ï§ò. 1Ï†àÎ∂ÄÌÑ∞ ÎÅùÍπåÏßÄ ÏûêÏÑ∏Ìûà.
    Ïûò Î™®Î•¥Îäî Î∂ÄÎ∂ÑÏùÄ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïù¥Ïñ¥ÏÑú Ïç®Ï§ò.
    ÌîºÏ≤òÎßÅ, Ïï®Î≤î Ï†ïÎ≥¥, Í∞ÄÏÇ¨, OST, MV Îì±ÏùÄ Î¨¥ÏãúÌïòÍ≥† Í≥°Ïùò Í∞ÄÏÇ¨Îßå Ï∂îÏ∂úÌï¥Ï§ò.
    """
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return response.choices[0].message.content

# Genius APIÎ°ú Í∞ÄÏÇ¨ Í∞ÄÏ†∏Ïò§Í∏∞
def search_lyrics_from_genius(artist: str, title: str) -> str:
    try:
        song = genius.search_song(title, artist)
        if not song or not song.url:
            return "‚ùå GeniusÏóêÏÑú Í≥°ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."

        # üï∏Ô∏è Í∞ÄÏÇ¨ ÌéòÏù¥ÏßÄ ÌÅ¨Î°§ÎßÅ
        res = requests.get(song.url)
        soup = BeautifulSoup(res.text, 'html.parser')

        # Í∞ÄÏÇ¨ ÌéòÏù¥ÏßÄÏóêÏÑú Í∞ÄÏÇ¨Î•º Ìè¨Ìï®ÌïòÎäî divÎ•º Ï∞æÏïÑÏÑú Ï∂îÏ∂ú
        lyrics_divs = soup.find_all("div", attrs={"data-lyrics-container": "true"})

        # Í∞ÄÏÇ¨ ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
        raw_lyrics = "\n".join(div.get_text(separator="\n").strip() for div in lyrics_divs)

        # ÎîîÎ≤ÑÍπÖ: ÏõêÎ≥∏ Í∞ÄÏÇ¨ Ï∂úÎ†• (ÌïÑÌÑ∞ÎßÅ Ï†Ñ)
        print("Original lyrics:", raw_lyrics)

        # Î∂àÌïÑÏöîÌïú Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ÎÇò ÏÑ§Î™ÖÏùÑ ÌïÑÌÑ∞ÎßÅÌïòÎäî Ìï®Ïàò
        def clean_lyrics(raw: str) -> str:
            # Ï∂îÍ∞ÄÎ°ú Ï†úÍ±∞Ìï¥Ïïº Ìï† ÌÖçÏä§Ìä∏ ÌïÑÌÑ∞ÎßÅ (Ïñ∏Ïñ¥, ÏÑ§Î™Ö, Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Îì±)
            skip_keywords = [
                "Contributors", "Translations", "Romanization",  # Í∞ÄÏÇ¨ Ïô∏Ïùò Î≤àÏó≠, Í∏∞Ïó¨Ïûê Í¥ÄÎ†® Î∂ÄÎ∂Ñ
                "English", "Fran√ßais", "Deutsch", "Espa√±ol",  # Ïó¨Îü¨ Ïñ∏Ïñ¥ Î≤ÑÏ†Ñ Í¥ÄÎ†® Î∂ÄÎ∂Ñ
                "Read More", "Song Info", "Artist", "You may also like", "Copyright",  # ÏÇ¨Ïù¥Ìä∏ ÎÇ¥ Îã§Î•∏ ÌÖçÏä§Ìä∏ Í¥ÄÎ†® Î∂ÄÎ∂Ñ
                "Copyright", "About this song"  # Í∞ÄÏÇ¨ Ïô∏Ïùò Ï†ÄÏûëÍ∂å Í¥ÄÎ†® ÌÖçÏä§Ìä∏
            ]
            
            # Í∞ÄÏÇ¨ÏóêÏÑú Ìïú Ï§ÑÏî© Ï≤òÎ¶¨ÌïòÎ©¥ÏÑú Î∂àÌïÑÏöîÌïú ÌÖçÏä§Ìä∏Î•º Ï†úÍ±∞
            lines = raw.splitlines()
            filtered = [
                line.strip() for line in lines
                if line.strip() and not any(kw in line for kw in skip_keywords)
            ]
            
            return "\n".join(filtered).strip()

        # ÌïÑÌÑ∞ÎßÅÎêú Í∞ÄÏÇ¨ Î∞òÌôò
        cleaned_lyrics = clean_lyrics(raw_lyrics)

        # ÎîîÎ≤ÑÍπÖ: ÌïÑÌÑ∞ÎßÅÎêú Í∞ÄÏÇ¨ Ï∂úÎ†•
        print("Cleaned lyrics:", cleaned_lyrics)

        # Í∞ÄÏÇ¨Í∞Ä ÏóÜÏúºÎ©¥ "Í∞ÄÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§." Î©îÏãúÏßÄ Î∞òÌôò
        return cleaned_lyrics or "‚ùå Í∞ÄÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."

    except Exception as e:
        # ÏóêÎü¨ Î∞úÏÉù Ïãú Î°úÍ∑∏ Ï∂úÎ†• Î∞è Ïò§Î•ò Î©îÏãúÏßÄ Î∞òÌôò
        print(f"üî• Genius API Ïò§Î•ò Î∞úÏÉù: {e}")
        return "‚ùå Genius Ìò∏Ï∂ú Ïã§Ìå®"

# ÌÜµÌï© Í∞ÄÏÇ¨ Í∞ÄÏ†∏Ïò§Í∏∞ (Genius Î®ºÏ†Ä ‚Üí Ïã§Ìå®ÌïòÎ©¥ GPT Î∞±ÏóÖ)
def get_lyrics(title: str, artist: str) -> str:
    lyrics = search_lyrics_from_genius(artist, title)
    if "‚ùå" in lyrics or len(lyrics) < 30:
        print("‚ö†Ô∏è GeniusÏóêÏÑú Í∞ÄÏÇ¨ Î™ª Ï∞æÏùå, GPTÎ°ú Ï∂îÏ†ï ÏãúÎèÑ")
        lyrics = generate_lyrics_by_title(title)
    return lyrics

# Í∞êÏÑ± Î∂ÑÏÑù
def analyze_lyrics_emotions(lyrics: str) -> dict:
    prompt = f"""
    ÏïÑÎûòÎäî ÎÖ∏Îûò Í∞ÄÏÇ¨ÏûÖÎãàÎã§. Ïù¥ Í∞ÄÏÇ¨Ïóê ÎåÄÌï¥ Îã§Ïùå 10Í∞ÄÏßÄ Í∞êÏ†ïÏóê ÎåÄÌï¥ 0~1 Ï†êÏàòÎ°ú Î∂ÑÏÑùÌï¥ Ï£ºÏÑ∏Ïöî:
    Í∞êÏ†ï: ÏÇ¨Îûë, Ï¶êÍ±∞ÏõÄ, Ïó¥Ï†ï, ÌñâÎ≥µ, Ïä¨Ìîî, Ïô∏Î°úÏõÄ, Í∑∏Î¶¨ÏõÄ, ÎÜÄÎûå, Î∂ÑÎÖ∏, ÎëêÎ†§ÏõÄ

    Í∞ÄÏÇ¨:
    {lyrics}

    Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥ºÎ•º JSON ÌòïÏãùÏúºÎ°ú Î∞òÌôòÌï¥Ï£ºÏÑ∏Ïöî.
    ÏòàÏãú: 
    {{
      "ÏÇ¨Îûë": 0.8,
      "Ïä¨Ìîî": 0.2,
      "Í∏∞ÏÅ®": 0.4,
      "Ïó¥Ï†ï": 0.7,
      ...
    }}
    """
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
        )
        content = response.choices[0].message.content
        return json.loads(content)
    except Exception as e:
        print("üî• Í∞êÏÑ± Î∂ÑÏÑù Ïò§Î•ò:", e)
        return {"error": str(e)}

# Í∞êÏ†ï Ï†êÏàòÎ•º %Î°ú Î≥ÄÌôò
def normalize_emotion_scores(raw_scores: dict) -> dict:
    if "error" in raw_scores:
        return raw_scores
    total = sum(raw_scores.values())
    if total == 0:
        return raw_scores
    return {k: round((v / total) * 100, 2) for k, v in raw_scores.items()}
